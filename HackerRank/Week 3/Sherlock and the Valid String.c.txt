#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

char* readline();

/*
 * Complete the 'isValid' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts STRING s as parameter.
 */

char* isValid(char* s) {
    static char yes[] = "YES";
    static char no[] = "NO";

    int freq[26] = {0};
    int n = strlen(s);

    // Count frequency of each character
    for (int i = 0; i < n; i++) {
        freq[s[i] - 'a']++;
    }

    // Count how many times each frequency occurs
    int freqCount[100002] = {0}; // string length <= 1e5
    for (int i = 0; i < 26; i++) {
        if (freq[i] > 0) {
            freqCount[freq[i]]++;
        }
    }

    // Collect distinct frequencies
    int distinctFreq[3];
    int distinctCount = 0;
    for (int i = 1; i <= n; i++) {
        if (freqCount[i] > 0) {
            distinctFreq[distinctCount++] = i;
            if (distinctCount > 2) return no;
        }
    }

    // Case 1: All characters have same frequency
    if (distinctCount == 1) return yes;

    // Case 2: Two distinct frequencies
    if (distinctCount == 2) {
        int f1 = distinctFreq[0], f2 = distinctFreq[1];
        if (f1 > f2) {
            int tmp = f1; f1 = f2; f2 = tmp;
        }

        // One character appears once (frequency = 1)
        if (f1 == 1 && freqCount[f1] == 1) return yes;

        // Higher frequency occurs only once and differs by 1
        if (f2 == f1 + 1 && freqCount[f2] == 1) return yes;

        return no;
    }

    return no;
}

int main() {
    char* s = readline();
    char* result = isValid(s);
    printf("%s\n", result);
    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);
    if (!data) return NULL;

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) break;

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;

        alloc_length <<= 1;
        char* newData = realloc(data, alloc_length);
        if (!newData) {
            free(data);
            return NULL;
        }
        data = newData;
    }

    if (data_length > 0 && data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    } else {
        data = realloc(data, data_length + 1);
        if (data) data[data_length] = '\0';
    }

    return data;
}
