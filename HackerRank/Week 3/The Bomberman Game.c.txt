#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);
int parse_int(char*);

#define BOMB_CHAR 'O'
#define EMPTY_CHAR '.'

/*
 * Complete the 'bomberMan' function below.
 *
 * The function is expected to return a STRING_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. STRING_ARRAY grid
 */

char** bomberMan(int n, int r, char** grid, int* result_count) {
    int c = (int)strlen(grid[0]);

    // Allocate grid
    char** alloc_grid(int rows, int cols) {
        char** g = (char**)malloc(rows * sizeof(char*));
        for (int i = 0; i < rows; i++) {
            g[i] = (char*)malloc((cols + 1) * sizeof(char));
            g[i][cols] = '\0';
        }
        return g;
    }

    // Copy grid
    void copy_grid(char** dst, char** src, int rows, int cols) {
        for (int i = 0; i < rows; i++) {
            memcpy(dst[i], src[i], cols);
        }
    }

    // Fill grid with a char
    void fill_grid(char** g, int rows, int cols, char ch) {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) g[i][j] = ch;
        }
    }

    // Detonate bombs
    char** detonate(char** prev, int rows, int cols) {
        char** next = alloc_grid(rows, cols);
        fill_grid(next, rows, cols, BOMB_CHAR);

        int di[5] = {0,  1, -1, 0, 0};
        int dj[5] = {0,  0,  0, 1,-1};

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (prev[i][j] == BOMB_CHAR) {
                    for (int k = 0; k < 5; k++) {
                        int ni = i + di[k];
                        int nj = j + dj[k];
                        if (ni >= 0 && ni < rows && nj >= 0 && nj < cols) {
                            next[ni][nj] = EMPTY_CHAR;
                        }
                    }
                }
            }
        }
        return next;
    }

    *result_count = r;

    // Case n == 1: return the initial grid
    if (n == 1) {
        char** out = alloc_grid(r, c);
        copy_grid(out, grid, r, c);
        return out;
    }

    // Case even n: full bombs
    if (n % 2 == 0) {
        char** full = alloc_grid(r, c);
        fill_grid(full, r, c, BOMB_CHAR);
        return full;
    }

    // Case odd n >= 3: use cycle
    char** first = detonate(grid, r, c);       // state at t=3
    if (n % 4 == 3) {
        return first;
    }

    // state at t=5
    char** second = detonate(first, r, c);

    // free first
    for (int i = 0; i < r; i++) free(first[i]);
    free(first);

    return second;
}

int main() {
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char** first_multiple_input = split_string(rtrim(readline()));

    int r = parse_int(*(first_multiple_input + 0));
    int c = parse_int(*(first_multiple_input + 1));
    int n = parse_int(*(first_multiple_input + 2));

    char** grid = malloc(r * sizeof(char*));
    for (int i = 0; i < r; i++) {
        char* grid_item = readline();
        *(grid + i) = grid_item;
    }

    int result_count;
    char** result = bomberMan(n, r, grid, &result_count);

    for (int i = 0; i < result_count; i++) {
        fprintf(fptr, "%s", *(result + i));
        if (i != result_count - 1) {
            fprintf(fptr, "\n");
        }
    }

    fprintf(fptr, "\n");
    fclose(fptr);

    return 0;
}

// Utility functions

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) break;

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;

        alloc_length <<= 1;
        data = realloc(data, alloc_length);

        if (!data) return '\0';
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
        data = realloc(data, data_length);
        if (!data) return '\0';
    } else {
        data = realloc(data, data_length + 1);
        if (!data) return '\0';
        else data[data_length] = '\0';
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) return '\0';
    if (!*str) return str;
    while (*str != '\0' && isspace(*str)) str++;
    return str;
}

char* rtrim(char* str) {
    if (!str) return '\0';
    if (!*str) return str;
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) end--;
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;
    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        if (!splits) return splits;
        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }
    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') exit(EXIT_FAILURE);
    return value;
}
