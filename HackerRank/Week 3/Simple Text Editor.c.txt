#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure to store operations for undo
typedef struct Operation {
    int type;      // 1 = append, 2 = delete
    char *data;    // data appended or deleted
} Operation;

int main() {
    int Q;
    scanf("%d", &Q);

    char *S = (char *)malloc(2000001 * sizeof(char));  // store string
    S[0] = '\0';  // start empty
    int len = 0;

    Operation *stack = (Operation *)malloc(Q * sizeof(Operation));
    int top = -1;

    for (int i = 0; i < Q; i++) {
        int type;
        scanf("%d", &type);

        if (type == 1) {
            // Append
            char W[1000001];
            scanf("%s", W);
            int wlen = strlen(W);

            strcat(S, W);
            len += wlen;

            // Save operation for undo
            stack[++top].type = 1;
            stack[top].data = strdup(W);

        } else if (type == 2) {
            // Delete
            int k;
            scanf("%d", &k);

            char *deleted = (char *)malloc((k + 1) * sizeof(char));
            strncpy(deleted, S + len - k, k);
            deleted[k] = '\0';

            S[len - k] = '\0';
            len -= k;

            // Save operation for undo
            stack[++top].type = 2;
            stack[top].data = deleted;

        } else if (type == 3) {
            // Print kth character
            int k;
            scanf("%d", &k);
            printf("%c\n", S[k - 1]);

        } else if (type == 4) {
            // Undo
            if (top >= 0) {
                Operation last = stack[top--];

                if (last.type == 1) {
                    // Undo append: remove last appended string
                    int wlen = strlen(last.data);
                    S[len - wlen] = '\0';
                    len -= wlen;

                } else if (last.type == 2) {
                    // Undo delete: re-append deleted string
                    strcat(S, last.data);
                    len += strlen(last.data);
                }
                free(last.data);
            }
        }
    }

    free(S);
    free(stack);
    return 0;
}
